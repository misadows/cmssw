process TotemCastorTest  = 
{ 
    service = MessageLogger
    {
	untracked vstring destinations = {"warning.txt","error.txt","info.txt","debugmessages.txt"}
	
	untracked vstring categories = {  "ForwardSim", "TotemRP"}
	untracked vstring debugModules = { "*" }
	untracked PSet error.txt         = {untracked string threshold = "ERROR"  }
	untracked PSet warning.txt       = {untracked string threshold = "WARNING"}
	untracked PSet info.txt          = {untracked string threshold = "INFO"  }
	untracked PSet debugmessages.txt = {untracked string threshold = "DEBUG"
	    untracked PSet INFO     = { untracked int32 limit = 0 }
	    untracked PSet DEBUG    = { untracked int32 limit = 0 }
	    untracked PSet TotemRP  = { untracked int32 limit = 1000000 }
	    untracked PSet ForwardSim = { untracked int32 limit = 1000000 }
	}
    }
    
    service = RandomNumberGeneratorService
    {
  	untracked uint32 sourceSeed = 13579097
  	PSet moduleSeeds =
  	{
	    untracked uint32 VtxSmeared = 12340567
	    untracked uint32 SimG4Object = 9876
	    untracked uint32 RPSiDetDigitizer = 137137
  	}
    }
    
    
    include "SimGeneral/HepPDTESSource/data/pdt.cfi"
    
    untracked PSet maxEvents = {untracked int32 input = 10}
    
    source = FlatRandomEGunSource
    { 
	untracked PSet PGunParameters = 
	{
	    untracked vint32 PartID = {13}
	    untracked double MinEta = 4.
	    untracked double MaxEta = 5.
	    untracked double MinPhi = 1.41
	    untracked double MaxPhi = 5.41
	    untracked double MinE   = 19.99
	    untracked double MaxE   = 20.01
	}
	untracked int32 Verbosity = 0 # set to 1 (or greater)  for printouts
    }
    
    module VtxSmeared = GaussEvtVtxGenerator
    {
//	  string type = "IOMC/EventVertexGenerators/GaussianEventVertexGenerator"
	double MeanX = 0.
	double MeanY = 0.
	double MeanZ = 0.
	double SigmaX = 0.0015
	double SigmaY = 0.0015
	double SigmaZ = 5.3  // in cm (as in COBRA/OSCAR)
    }
    
	#Geometry
    include "SimG4CMS/TotemRP/test/data/RPGeometryXML.cfi"
    
	#Magnetic Field
    include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"
    
    module o1 = PoolOutputModule {untracked string fileName ="simtotemevent.root"} 
    
    module SimG4Object = OscarProducer
    { 
	bool NonBeamEvent = false
		#
	untracked int32 G4EventManagerVerbosity = 0
	untracked int32 G4StackManagerVerbosity = 0
	untracked int32 G4TrackingManagerVerbosity = 0
		#
	bool UseMagneticField = true
	bool OverrideUserStackingAction = true
	bool StoreRndmSeeds = false
	bool RestoreRndmSeeds = false
		#
		# not sure if it should be (un)tracked ?
		#
	string PhysicsTablesDirectory = "PhysicsTables"
	bool StorePhysicsTables = false
	bool RestorePhysicsTables = false
	PSet MagneticField = 
	{
	    double delta = 1.
	    bool UseLocalMagFieldManager = false
            PSet ConfGlobalMFM =
            {
                string Volume = "OCMS"
                PSet OCMS =
                {
                    string Type = "CMSIMField"
                    string Stepper = "G4ClassicalRK4"
                    PSet G4ClassicalRK4 =
                    {            
                        double MinStep = 0.1 # in mm
                        double DeltaChord = 0.001 # in mm
                        double DeltaOneStep = 0.001 # in mm
                        double DeltaIntersection = 0.0001 # in mm
                        untracked double DeltaIntersectionAndOneStep = -1.
                        untracked double MaximumLoopCounts = 1000.
                        untracked double MinimumEpsilonStep = 0.00001  # in mm
                        untracked double MaximumEpsilonStep = 0.01 # in mm
                    }
                }
            }
	}
	PSet Physics = {
	    string type = "SimG4Core/Physics/QGSP"
	    bool DummyEMPhysics = false
	    bool CutsPerRegion = true
	    double DefaultCutValue = 10000.
	    double G4BremsstrahlungThreshold = 0.5 # cut in GeV
	    untracked int32 Verbosity = 1
	    
	    double GFlashEmin = 1.0
	    double GFlashEmax = 1000000.0
	    double GFlashEToKill = 0.1
	}
	PSet Generator = {
	    string HepMCProductLabel = "VtxSmeared"
		     //string HepMCProductLabel = source
	    
	    bool ApplyPtCuts = false
	    bool ApplyEtaCuts = false
	    bool ApplyPhiCuts = false
	    double MinPhiCut = -3.14159265358979323846 # in radians
	    double MaxPhiCut = 3.14159265358979323846 # according to CMS conventions
	    double MinEtaCut = -9.0
	    double MaxEtaCut = 9.0
	    double MinPtCut = 40.
	    double MaxPtCut = 999999.
	    double DecLenCut = 10. # the minimum decay length in cm (!) for mother tracking
	    untracked int32 Verbosity = 1
	}
	PSet RunAction = { string StopFile = "StopRun" }
	PSet EventAction = {
	    bool CollapsePrimaryVertices = false
	    string StopFile = "StopRun"
	    untracked bool debug = false
	}
	PSet StackingAction =
	{
	    untracked bool SavePrimaryDecayProductsAndConversions = false
	}
	
	PSet TrackingAction = { untracked bool DetailedTiming = false }
	PSet SteppingAction = {
	    bool   KillBeamPipe = false
	    double CriticalEnergyForVacuum = 2.0
	    double CriticalDensity = 1.e-25
	    untracked int32  Verbosity = 5
	}
	PSet CaloSD = {
	    double EminTrack = 1.0
	    untracked int32  CheckHits = 25
	    untracked bool   UseMap = true
	    untracked int32  Verbosity = 0
	    untracked bool   DetailedTiming = false
	}
	PSet CaloTrkProcessing = {
	    bool   TestBeam  = false
	    double EminTrack = 0.01
	}		     
	PSet CastorSD =	{
	    untracked int32  Verbosity = 0
	}
	PSet TotemSD =	{
	    untracked int32  Verbosity = 0
	}
	PSet Totem_RP_SD =
	{
	    untracked int32  Verbosity = 0
	}
	VPSet Watchers = 
	{
#			{
	#		  string type = "TotemTestGem"
		#		PSet TotemTestGem = 
			#	{
				#	vstring Names = {"TotemHitsT1",	"TotemHitsT2Gem"}
					#string FileName = "TotemTestGem.root"
#	        string FileNameOLD  = "myTotemHits.root"
	#			}
		#	}
			#,
	    {
		string type = "TotemRP"
		PSet TotemRP = 
		{
		    vstring Names = {"TotemHitsRP"}
		    string FileName = "TotemTestRP_Hits.root"
		    string FileNameOLD  = "TotemTestRP_Hits_Old.root"
		}
	    }
	}
    }
	//path p1 = { SimG4Object }
    path p1 = { VtxSmeared, SimG4Object }
    endpath outpath = { o1 }
    
    service = Timing {}
    service = Tracer {}
}
